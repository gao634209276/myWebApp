JavaScript 使用误区
赋值运算符应用错误
	在 JavaScript 程序中如果你在 if 条件语句中使用赋值运算符的等号 (=) 将会产生一个错误结果,
	正确的方法是使用比较运算符的两个等号 (==)。
	if 条件语句返回 false (是我们预期的)因为 x 不等于 10:

比较运算符常见错误
	在常规的比较中，数据类型是被忽略的，以下 if 条件语句返回 true：
		var x = 10;
	    var y = "10";
		if (x == y)
	在严格的比较运算中，=== 为恒等计算符，同时检查表达式的值与类型，以下 if 条件语句返回 false：
		var x = 10;
		var y = "10";
		if (x === y)
	这种错误经常会在 switch 语句中出现，switch 语句会使用恒等计算符(===)进行比较:
	以下实例会执行 alert 弹窗：
		var x = 10;
		switch(x) {
			case 10: alert("Hello");
		}
	以下实例由于类型不一致不会执行 alert 弹窗：
		var x = 10;
		switch(x) {
			case "10": alert("Hello");
		}
加法与连接注意事项
	加法是两个数字相加。
	连接是两个字符串连接。
	JavaScript 的加法和连接都使用 + 运算符。
	接下来我们可以通过实例查看两个数字相加及数字与字符串连接的区别：
	使用变量相加结果也不一致
		var x = 10;
		var y = 5;
		var z = x + y;           // z 的结果为 15
		var x = 10;
		var y = "5";
		var z = x + y;           // z 的结果为 "105"
浮点型数据使用注意事项
	JavaScript 中的所有数据都是以 64 位浮点型数据(float) 来存储。
		var x = 0.1;
		var y = 0.2;
		var z = x + y            // z 的结果为 0.3
		if (z == 0.3)            // 返回 false
	为解决以上问题，可以用整数的乘除法来解决：
		var z = (x * 10 + y * 10) / 10;       // z 的结果为 0.3
JavaScript 字符串分行
	JavaScript 允许我们在字符串中使用断行语句:
		var x =
		"Hello World!";
	但是，在字符串中直接使用回车换行是会报错的：
		var x = "Hello
		World!";
	我们可以在选择开发工具或按下 F12 来查看错误信息：
	字符串断行需要使用反斜杠(\)，如下所示:
		var x = "Hello \
		World!";
错误的使用分号
	以下实例中，由于分号使用错误，if 语句中的代码块将无法执行：
		if (x == 19);
		{
		    // code block
		}