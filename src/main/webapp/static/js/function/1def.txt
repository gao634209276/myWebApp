JavaScript 函数定义
	JavaScript 使用关键字 function 定义函数。
	函数可以通过声明定义，也可以是一个表达式。
函数声明
	在之前的教程中，你已经了解了函数声明的语法 :
		function functionName(parameters) {
		  执行的代码
		}
	函数声明后不会立即执行，会在我们需要的时候调用到。
函数表达式
	JavaScript 函数可以通过一个表达式定义。
		var x = function (a, b) {return a * b};
		var z = x(4, 3);
		以上函数实际上是一个 匿名函数 (函数没有名称)。
	函数存储在变量中，不需要函数名称，通常通过变量名来调用。

Function() 构造函数
	函数同样可以通过内置的 JavaScript 函数构造器（Function()）定义。
		var myFunction = new Function("a", "b", "return a * b");
		var x = myFunction(4, 3);
	实际上，你不必使用构造函数。上面实例可以写成：
		var myFunction = function (a, b) {return a * b}
		var x = myFunction(4, 3);

JavaScript 函数参数
函数显式参数(Parameters)与隐式参数(Arguments)
	在先前的教程中，我们已经学习了函数的显式参数:
		functionName(parameter1, parameter2, parameter3) {
		    // 要执行的代码……
		}
	函数显式参数在函数定义时列出。
	函数隐式参数在函数调用时传递给函数真正的值。

参数规则
	JavaScript 函数定义时显式参数没有指定数据类型。
	JavaScript 函数对隐式参数没有进行类型检测。
	JavaScript 函数对隐式参数的个数没有进行检测。
默认参数
	如果函数在调用时未提供隐式参数，参数会默认设置为： undefined
	有时这是可以接受的，但是建议最好为参数设置一个默认值：
		See: demo2
	如果函数调用时设置了过多的参数，参数将无法被引用，因为无法找到对应的参数名。只能使用 arguments 对象来调用。

Arguments 对象
	JavaScript 函数有个内置的对象 arguments 对象。
	argument 对象包含了函数调用的参数数组。
	通过这种方式你可以很方便的找到最大的一个参数的值：
		See argFun
	或者创建一个函数用来统计所有数值的和：

通过值传递参数
	在函数中调用的参数是函数的隐式参数。
	JavaScript 隐式参数通过值来传递：函数仅仅只是获取值。
	如果函数修改参数的值，不会修改显式参数的初始值（在函数外定义）。
	隐式参数的改变在函数外是不可见的。
通过对象传递参数
	在JavaScript中，可以引用对象的值。
	因此我们在函数内部修改对象的属性就会修改其初始的值。
	修改对象属性可作用于函数外部（全局变量）。
	修改对象属性在函数外是可见的。







